name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, alpha ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  issues: write
  pull-requests: write
  actions: write
  id-token: write

env:
  DOCKER_IMAGE: md-to-bbcode
  DOCKER_REGISTRY: docker.io

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', 3.11, 3.12]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run tests
      run: |
        python test_converter.py
    
    - name: Test CLI functionality
      run: |
        # Test version command
        python md_to_bbcode.py --version
        
        # Test basic conversion
        echo "# Test **bold** and *italic*" | python md_to_bbcode.py > output.bbcode
        cat output.bbcode
        
        # Test file conversion
        python md_to_bbcode.py -f sample.md -o sample_output.bbcode
        ls -la *.bbcode

  docker-test:
    name: Docker Tests
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image for testing
      run: |
        docker build -t ${{ env.DOCKER_IMAGE }}:test .
    
    - name: Test Docker image
      run: |
        # Test basic functionality
        echo "# Docker Test **works**" | docker run --rm -i ${{ env.DOCKER_IMAGE }}:test
        
        # Test file conversion
        docker run --rm -v $(pwd):/data ${{ env.DOCKER_IMAGE }}:test -f /data/sample.md
        
        # Test version
        docker run --rm ${{ env.DOCKER_IMAGE }}:test --version
        
        # Test help
        docker run --rm ${{ env.DOCKER_IMAGE }}:test --help

  release:
    name: Semantic Release
    runs-on: ubuntu-latest
    needs: [test, docker-test]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/alpha' || github.ref == 'refs/heads/develop')
    outputs:
      new-release-published: ${{ steps.semantic.outputs.new-release-published }}
      new-release-version: ${{ steps.semantic.outputs.new-release-version }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        persist-credentials: true
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: npm
    
    - name: Install semantic-release dependencies
      run: npm ci
    
    - name: Configure Git
      run: |
        git config --global user.name "semantic-release"
        git config --global user.email "semantic-release@users.noreply.github.com"
    
    - name: Run semantic-release
      id: semantic
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "Running semantic-release..."
        npx semantic-release --dry-run=false || {
          echo "semantic-release failed, but continuing..."
          echo "new-release-published=false" >> $GITHUB_OUTPUT
          exit 0
        }

  docker-build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: release
    if: needs.release.outputs.new-release-published == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: main
        fetch-depth: 0
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}
        tags: |
          type=semver,pattern={{version}},value=v${{ needs.release.outputs.new-release-version }}
          type=semver,pattern={{major}}.{{minor}},value=v${{ needs.release.outputs.new-release-version }}
          type=semver,pattern={{major}},value=v${{ needs.release.outputs.new-release-version }}
          type=raw,value=latest
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test published image
      run: |
        # Wait a moment for the image to be available
        sleep 10
        
        # Test the published image
        echo "# Published Test v${{ needs.release.outputs.new-release-version }} **success**" | docker run --rm -i ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}:${{ needs.release.outputs.new-release-version }}

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [release, docker-build-and-push]
    if: needs.release.outputs.new-release-published == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}:${{ needs.release.outputs.new-release-version }}
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
